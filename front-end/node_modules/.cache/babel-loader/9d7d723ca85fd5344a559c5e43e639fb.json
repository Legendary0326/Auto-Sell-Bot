{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport { ethers } from 'ethers';\nimport { Contract } from \"@ethersproject/contracts\";\nimport { useContractCall, useContractFunction } from '@usedapp/core';\nimport { suniTokenAddress, airdropContractAddress } from '../contract_ABI/vestingData';\n\nconst airdropContractAbi = require('../contract_ABI/airdrop_contract_abi.json');\n\nconst suniContractAbi = require('../contract_ABI/suni_contract_abi.json');\n\nconst airdropContractInterface = new ethers.utils.Interface(airdropContractAbi);\nconst suniContractInterface = new ethers.utils.Interface(suniContractAbi);\nconst airdropContract = new Contract(airdropContractAddress, airdropContractInterface);\nconst suniContract = new Contract(suniTokenAddress, suniContractInterface);\n/** functions for the vesting contract */\n//get status of contract hook\n\nexport function useGetLastClaimedTime(account, tokenId) {\n  _s();\n\n  var _useContractCall;\n\n  const [timestamp] = (_useContractCall = useContractCall({\n    abi: airdropContractInterface,\n    address: airdropContractAddress,\n    method: 'getLastClaimedTime',\n    args: [account, tokenId]\n  })) !== null && _useContractCall !== void 0 ? _useContractCall : [];\n  return timestamp;\n}\n\n_s(useGetLastClaimedTime, \"CyeqBowMBQuAu1HzqGLZIvpyK4g=\", false, function () {\n  return [useContractCall];\n});\n\nexport function useGetTotalClaimableAmount(tokenIds, startTimestamps, account) {\n  _s2();\n\n  var _useContractCall2;\n\n  const [amount] = (_useContractCall2 = useContractCall({\n    abi: airdropContractInterface,\n    address: airdropContractAddress,\n    method: 'getAmount',\n    args: [tokenIds, startTimestamps, account]\n  })) !== null && _useContractCall2 !== void 0 ? _useContractCall2 : [];\n  return amount;\n} // send transaction hook\n\n_s2(useGetTotalClaimableAmount, \"CyeqBowMBQuAu1HzqGLZIvpyK4g=\", false, function () {\n  return [useContractCall];\n});\n\nexport function useAirdropContractMethod(methodName) {\n  _s3();\n\n  const {\n    state,\n    send,\n    events\n  } = useContractFunction(airdropContract, methodName, {});\n  return {\n    state,\n    send,\n    events\n  };\n}\n\n_s3(useAirdropContractMethod, \"dkJhoML9bEu1hHDm7ibtPPgdzuU=\", false, function () {\n  return [useContractFunction];\n});\n\nexport function useSuniContractMethod(methodName) {\n  _s4();\n\n  const {\n    state,\n    send,\n    events\n  } = useContractFunction(suniContract, methodName, {});\n  return {\n    state,\n    send,\n    events\n  };\n}\n/** the end for the vesting */\n\n_s4(useSuniContractMethod, \"dkJhoML9bEu1hHDm7ibtPPgdzuU=\", false, function () {\n  return [useContractFunction];\n});","map":{"version":3,"sources":["D:/Work Space/Auto-Sell-Bot/src/util/interact.js"],"names":["ethers","Contract","useContractCall","useContractFunction","suniTokenAddress","airdropContractAddress","airdropContractAbi","require","suniContractAbi","airdropContractInterface","utils","Interface","suniContractInterface","airdropContract","suniContract","useGetLastClaimedTime","account","tokenId","timestamp","abi","address","method","args","useGetTotalClaimableAmount","tokenIds","startTimestamps","amount","useAirdropContractMethod","methodName","state","send","events","useSuniContractMethod"],"mappings":";;;;;AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,eAAT,EAA0BC,mBAA1B,QAAqD,eAArD;AAEA,SACEC,gBADF,EAEEC,sBAFF,QAGO,6BAHP;;AAKA,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,2CAAD,CAAlC;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,wCAAD,CAA/B;;AAEA,MAAME,wBAAwB,GAAG,IAAIT,MAAM,CAACU,KAAP,CAAaC,SAAjB,CAA2BL,kBAA3B,CAAjC;AACA,MAAMM,qBAAqB,GAAG,IAAIZ,MAAM,CAACU,KAAP,CAAaC,SAAjB,CAA2BH,eAA3B,CAA9B;AAEA,MAAMK,eAAe,GAAG,IAAIZ,QAAJ,CAAaI,sBAAb,EAAqCI,wBAArC,CAAxB;AACA,MAAMK,YAAY,GAAG,IAAIb,QAAJ,CAAaG,gBAAb,EAA+BQ,qBAA/B,CAArB;AAEA;AACA;;AACA,OAAO,SAASG,qBAAT,CAA+BC,OAA/B,EAAwCC,OAAxC,EAAiD;AAAA;;AAAA;;AACpD,QAAM,CAACC,SAAD,wBAAchB,eAAe,CAAC;AAClCiB,IAAAA,GAAG,EAAEV,wBAD6B;AAElCW,IAAAA,OAAO,EAAEf,sBAFyB;AAGlCgB,IAAAA,MAAM,EAAE,oBAH0B;AAIlCC,IAAAA,IAAI,EAAE,CAACN,OAAD,EAAUC,OAAV;AAJ4B,GAAD,CAA7B,+DAKA,EALN;AAMA,SAAOC,SAAP;AACH;;GAReH,qB;UACQb,e;;;AASxB,OAAO,SAASqB,0BAAT,CAAoCC,QAApC,EAA8CC,eAA9C,EAA+DT,OAA/D,EAAwE;AAAA;;AAAA;;AAC7E,QAAM,CAACU,MAAD,yBAAWxB,eAAe,CAAC;AAC/BiB,IAAAA,GAAG,EAAEV,wBAD0B;AAE/BW,IAAAA,OAAO,EAAEf,sBAFsB;AAG/BgB,IAAAA,MAAM,EAAE,WAHuB;AAI/BC,IAAAA,IAAI,EAAE,CAACE,QAAD,EAAWC,eAAX,EAA4BT,OAA5B;AAJyB,GAAD,CAA1B,iEAKA,EALN;AAMA,SAAOU,MAAP;AACD,C,CAED;;IAVgBH,0B;UACGrB,e;;;AAUnB,OAAO,SAASyB,wBAAT,CAAkCC,UAAlC,EAA8C;AAAA;;AACjD,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,IAAT;AAAeC,IAAAA;AAAf,MAA0B5B,mBAAmB,CAACU,eAAD,EAAkBe,UAAlB,EAA8B,EAA9B,CAAnD;AACA,SAAO;AAAEC,IAAAA,KAAF;AAASC,IAAAA,IAAT;AAAeC,IAAAA;AAAf,GAAP;AACH;;IAHeJ,wB;UACoBxB,mB;;;AAIpC,OAAO,SAAS6B,qBAAT,CAA+BJ,UAA/B,EAA2C;AAAA;;AAC9C,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,IAAT;AAAeC,IAAAA;AAAf,MAA0B5B,mBAAmB,CAACW,YAAD,EAAec,UAAf,EAA2B,EAA3B,CAAnD;AACA,SAAO;AAAEC,IAAAA,KAAF;AAASC,IAAAA,IAAT;AAAeC,IAAAA;AAAf,GAAP;AACH;AAED;;IALgBC,qB;UACoB7B,mB","sourcesContent":["import { ethers } from 'ethers';\r\nimport { Contract } from \"@ethersproject/contracts\";\r\nimport { useContractCall, useContractFunction } from '@usedapp/core';\r\n\r\nimport { \r\n  suniTokenAddress, \r\n  airdropContractAddress \r\n} from '../contract_ABI/vestingData';\r\n\r\nconst airdropContractAbi = require('../contract_ABI/airdrop_contract_abi.json');\r\nconst suniContractAbi = require('../contract_ABI/suni_contract_abi.json');\r\n\r\nconst airdropContractInterface = new ethers.utils.Interface(airdropContractAbi);\r\nconst suniContractInterface = new ethers.utils.Interface(suniContractAbi);\r\n\r\nconst airdropContract = new Contract(airdropContractAddress, airdropContractInterface);\r\nconst suniContract = new Contract(suniTokenAddress, suniContractInterface);\r\n\r\n/** functions for the vesting contract */\r\n//get status of contract hook\r\nexport function useGetLastClaimedTime(account, tokenId) {\r\n    const [timestamp] = useContractCall({\r\n      abi: airdropContractInterface,\r\n      address: airdropContractAddress,\r\n      method: 'getLastClaimedTime',\r\n      args: [account, tokenId],\r\n    }) ?? [];\r\n    return timestamp;\r\n}\r\n\r\nexport function useGetTotalClaimableAmount(tokenIds, startTimestamps, account) {\r\n  const [amount] = useContractCall({\r\n    abi: airdropContractInterface,\r\n    address: airdropContractAddress,\r\n    method: 'getAmount',\r\n    args: [tokenIds, startTimestamps, account],\r\n  }) ?? [];\r\n  return amount;\r\n}\r\n\r\n// send transaction hook\r\nexport function useAirdropContractMethod(methodName) {\r\n    const { state, send, events } = useContractFunction(airdropContract, methodName, {});\r\n    return { state, send, events };\r\n}\r\n\r\nexport function useSuniContractMethod(methodName) {\r\n    const { state, send, events } = useContractFunction(suniContract, methodName, {});\r\n    return { state, send, events };\r\n}\r\n\r\n/** the end for the vesting */\r\n"]},"metadata":{},"sourceType":"module"}